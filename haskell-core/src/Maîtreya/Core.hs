{-# LANGUAGE OverloadedStrings #-}
module Ma√Ætreya.Core
  ( initializeMa√Ætreya
  , Ma√ÆtreyaState(..)
  , AudioConfig(..)
  , runMa√Ætreya
  ) where

import Control.Monad.State
import Data.Text (Text)
import qualified Data.Text as T

-- | MAITREYA DAW Core State
data Ma√ÆtreyaState = Ma√ÆtreyaState
  { audioConfig :: AudioConfig
  , isRunning :: Bool
  , currentProject :: Maybe Text
  } deriving (Show, Eq)

-- | Audio Configuration following SIEGE principles
data AudioConfig = AudioConfig
  { sampleRate :: Int      -- Must be integer for SIEGE
  , bufferSize :: Int      -- Integer execution
  , channels :: Int        -- Integer precision
  , latencyMs :: Int       -- Integer latency target
  } deriving (Show, Eq)

-- | Initialize MAITREYA DAW with gentle revolution principles
initializeMa√Ætreya :: IO Ma√ÆtreyaState
initializeMa√Ætreya = do
  putStrLn "üéµ MAITREYA DAW - Haskell Core Initializing..."
  putStrLn "üíô b122m faeb gentle revolution"
  putStrLn "üî¢ SIEGE: Software for Integer Execution of Garden Expressions"
  
  return Ma√ÆtreyaState
    { audioConfig = AudioConfig
        { sampleRate = 44100
        , bufferSize = 1024
        , channels = 2
        , latencyMs = 10
        }
    , isRunning = False
    , currentProject = Nothing
    }

-- | Run MAITREYA DAW with state monad
runMa√Ætreya :: State Ma√ÆtreyaState a -> Ma√ÆtreyaState -> IO (a, Ma√ÆtreyaState)
runMa√Ætreya action initialState = do
  let (result, finalState) = runState action initialState
  return (result, finalState)

-- | Start audio processing
startAudio :: State Ma√ÆtreyaState ()
startAudio = do
  state <- get
  put state { isRunning = True }

-- | Stop audio processing
stopAudio :: State Ma√ÆtreyaState ()
stopAudio = do
  state <- get
  put state { isRunning = False }

-- | Load project with gentle error handling
loadProject :: Text -> State Ma√ÆtreyaState (Either Text ())
loadProject projectName = do
  if T.null projectName
    then return (Left "Project name cannot be empty")
    else do
      state <- get
      put state { currentProject = Just projectName }
      return (Right ())
